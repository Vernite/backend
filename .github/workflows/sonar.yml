name: Run Sonar analysis
on:
  workflow_dispatch:
  workflow_call:
    secrets:
      MYSQL_PASSWORD:
          required: true
      SPRING_APPLICATION_PROPERTIES:
        required: true
      VERNITE_2022_PRIVATE_KEY_PEM:
        required: true
      SONAR_TOKEN:
        required: true
      SONAR_HOST_URL:
        required: true


jobs:
  analyze:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      # Set up JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "temurin"
          cache: maven

      # Install SonarQube
      - name: Cache SonarQube packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      # Install and configure MySQL
      - name: Install and configure MySQL
        run: |
          sudo systemctl start mysql.service
          mysql -h 127.0.0.1 -uroot -proot -e 'create database vernite charset utf8mb4'
          mysql -h 127.0.0.1 -uroot -proot -e 'create database vernite_test charset utf8mb4'
          mysql -h 127.0.0.1 -uroot -proot -e 'create user "vernite"@"localhost" identified by "${{ secrets.MYSQL_PASSWORD }}"'
          mysql -h 127.0.0.1 -uroot -proot -e 'grant all on *.* to "vernite"@"localhost" with grant option'

      # Install properties secrets
      - name: Install properties
        run: 'echo "$SPRING_APPLICATION_PROPERTIES" > application.properties'
        env:
          SPRING_APPLICATION_PROPERTIES: ${{ secrets.SPRING_APPLICATION_PROPERTIES }}

      # Prepare secret for signing JWT
      - name: Prepare secret
        run: |
          echo "${{ secrets.VERNITE_2022_PRIVATE_KEY_PEM }}" > key.pem
          openssl pkcs8 -topk8 -inform pem -in key.pem -out "vernite-2022.private-key.der" -outform der -nocrypt

      # Cache Maven packages
      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      # Download cache
      - name: Download cache
        uses: actions/cache@v3
        with:
          path: target
          key: ${{ runner.os }}-build-${{ github.run_id }}

      # Build and analyze
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=backend
